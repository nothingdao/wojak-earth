# NPC Engine Documentation

## Overview
The NPC Engine (npc-engine.js) is as autonomous character management system for the Wojak Earth game. It creates, manages, and controls Non-Player Characters (NPCs) that perform various activities within the game world, creating a living, breathing virtual environment.

## Core Architecture

### Main Components
1. **NPCEngine Class** - Central orchestrator managing all NPC operations
2. **Activity System** - Intelligent action selection and execution
3. **Wallet Management** - Secure Solana wallet handling for NPCs
4. **Population Control** - Dynamic NPC spawning and lifecycle management
5. **Configuration System** - Centralized settings from gameConfig.js

### Key Dependencies
- **Supabase**: Database operations and character data storage
- **Solana Web3.js**: Blockchain wallet operations and transactions
- **Game Config**: Centralized configuration and NPC personalities
- **Chat Messages**: Location-based conversation system
- **Wallet Manager**: Secure NPC wallet storage and retrieval

## Configuration System

### Environment Variables
- `NPC_COUNT`: Number of NPCs to maintain (default: 8)
- `NPC_INTERVAL`: Base activity interval in milliseconds
- `NPC_LOG_LEVEL`: Logging verbosity (debug/info/warn/error)
- `NPC_LOGS`: Enable/disable logging
- `NPC_RESPAWN`: Enable/disable NPC respawning after death
- `NODE_ENV`: Environment mode affecting default settings

### Configuration Features
- **Activity Intervals**: Configurable timing between NPC actions
- **Population Limits**: Maximum number of active NPCs
- **Logging Control**: Adjustable verbosity levels
- **Respawn System**: Configurable death and revival mechanics
- **Personality System**: Different behavioral patterns for NPCs

## Activity Mode Selection

The engine supports 8 different activity modes:

1. **Normal Mode**: Mixed activities (default balanced behavior)
2. **Exchange Only**: NPCs focus on SOL/coin trading
3. **Mining Only**: NPCs exclusively mine for resources
4. **Travel Only**: NPCs constantly move between locations
5. **Trading Only**: NPCs buy and sell items in markets
6. **Chat Only**: NPCs engage in location-based conversations
7. **Equipment Only**: NPCs focus on equipping items
8. **Survival Only**: NPCs prioritize using consumable items

## NPC Lifecycle Management

### Population Management
- **Active NPCs**: Healthy NPCs with sufficient energy
- **Resting NPCs**: Low-energy NPCs recovering strength
- **Dead NPCs**: NPCs that have died and await respawning
- **Population Stats**: Real-time tracking of NPC states

### Spawning Process
1. **Wallet Generation**: Create new Solana keypair
2. **Funding**: Transfer SOL from treasury wallet
3. **Character Creation**: Generate random gender and appearance
4. **NFT Minting**: Create blockchain-based character token
5. **Database Storage**: Save character data to Supabase
6. **Activity Scheduling**: Begin autonomous behavior

### Death and Respawn System
- **Death Conditions**: Health reaches 0 or critical failures
- **Death Handling**: Stop activities, update database status
- **Respawn Timing**: Configurable delay before revival
- **Respawn Location**: Safe starting areas for new life
- **Stat Reset**: Partial health/energy restoration

## Activity System

### Intelligent Action Selection
The engine uses a preference-based system:

#### Base Actions
- **MINE**: Extract resources from current location
- **TRAVEL**: Move to different game locations
- **BUY**: Purchase items from local markets
- **SELL**: Sell inventory items for coins
- **CHAT**: Send contextual messages in chat
- **EQUIP**: Equip items for better stats
- **USE_ITEM**: Consume items for health/energy
- **EXCHANGE**: Trade SOL for coins or vice versa

#### Smart Decision Making
- **Health Priority**: Low health prioritizes healing items
- **Energy Management**: Low energy triggers rest periods
- **Economic Logic**: Poor NPCs sell items, rich NPCs invest
- **Personality Influence**: Different types prefer different actions
- **Environmental Factors**: Location affects available actions

### Activity Scheduling
- **Staggered Timing**: Prevents all NPCs acting simultaneously
- **Personality Delays**: Different personalities have different pacing
- **Variance System**: Random timing to create natural behavior
- **Population Scaling**: More NPCs = longer individual delays

## Personality System

NPCs are assigned personalities that influence their behavior:

### Personality Types (from gameConfig.js)
- **Casual**: Balanced general activities
- **Merchant**: Focuses on trading and economics
- **Explorer**: Prefers travel and discovery
- **Miner**: Emphasizes resource extraction
- **Fighter**: Combat-oriented (if applicable)
- **Social**: Chat and interaction focused

### Behavioral Modifications
- **Action Preferences**: Weighted probability for different actions
- **Activity Timing**: Multipliers affecting action frequency
- **Risk Tolerance**: Willingness to engage in dangerous activities
- **Economic Strategy**: Different approaches to wealth management

## Economic System

### SOL/Coin Exchange
NPCs participate in a dynamic economy:

#### Exchange Strategies
1. **Necessity Trading**: Buy SOL when needed for transactions
2. **Liquidity Management**: Sell SOL when low on coins
3. **Portfolio Balancing**: Maintain optimal SOL/coin ratios
4. **Market Timing**: React to price fluctuations

#### Smart Economic Decisions
- **Minimum SOL**: Maintain transaction capability
- **Emergency Funds**: Keep reserves for critical situations
- **Merchant Logic**: Advanced trading for merchant personalities
- **Risk Management**: Avoid over-exposure to volatility

### Item Trading
- **Market Analysis**: Check local item availability and prices
- **Affordability Checks**: Only buy items within budget
- **Selling Logic**: Sell excess materials and unnecessary items
- **Inventory Management**: Balance keeping useful items vs. profit

## Health and Survival

### Health Management
- **Critical Health**: Emergency healing when health â‰¤ 5
- **Health Maintenance**: Proactive healing when health < 60
- **Item Prioritization**: Smart selection of healing consumables
- **Death Prevention**: Multiple attempts to avoid death

### Energy System
- **Rest Threshold**: Stop activities when energy too low
- **Energy Recovery**: Gradual restoration during rest periods
- **Activity Costs**: Different actions consume different energy
- **Efficiency Tracking**: Monitor energy usage patterns

## Location and Travel

### Travel Intelligence
- **Destination Selection**: Choose appropriate locations for NPC level
- **Cost Consideration**: Only travel to affordable destinations
- **Level Requirements**: Respect minimum level restrictions
- **Privacy Respect**: Avoid private or restricted areas

### Location-Based Behavior
- **Market Access**: Different locations have different items
- **Mining Opportunities**: Location-specific resources
- **Chat Context**: Location-appropriate conversation topics
- **Safety Considerations**: Dangerous areas affect behavior

## Communication System

### Chat Intelligence
- **Contextual Messages**: Different messages based on recent activities
- **Energy-Based Mood**: Tired NPCs have different conversation styles
- **Activity Reactions**: Comments about recent mining, trading, etc.
- **Location Awareness**: Messages appropriate to current location

### Message Categories
- **Default**: General conversation
- **Low Energy**: Tired/exhausted expressions
- **After Activity**: Reactions to recent actions
- **Location Specific**: Area-appropriate topics

## Equipment Management

### Smart Equipment Decisions
- **Category Filtering**: Only equip weapons, armor, tools
- **Availability Check**: Only equip unequipped items
- **Random Selection**: Variety in equipment choices
- **Primary Weapon**: Occasional designation of primary equipment

### Item Categories
- **WEAPON**: Combat equipment
- **ARMOR**: Protective gear
- **TOOL**: Utility items
- **MATERIAL**: Crafting components (not equipped)
- **CONSUMABLE**: Health/energy items (not equipped)

## Performance and Monitoring

### Metrics Tracking
- **Total Activities**: Count of all NPC actions
- **Error Rate**: Failed action percentage
- **Population Efficiency**: Active vs. total NPC ratio
- **Activity Distribution**: Which actions are most common

### Logging System
- **Debug Level**: Detailed operation information
- **Info Level**: General activity reports
- **Warn Level**: Important issues and deaths
- **Error Level**: Critical failures only

### Status Reporting
- **Real-time Stats**: Current population breakdown
- **Activity Summaries**: Periodic performance reports
- **Error Monitoring**: Track and report failures
- **Efficiency Metrics**: System performance indicators

## Error Handling and Recovery

### Graceful Degradation
- **API Failures**: Continue operation despite individual failures
- **Network Issues**: Retry logic and fallback behaviors
- **Data Corruption**: Validation and recovery procedures
- **Resource Limits**: Adaptive behavior under constraints

### Emergency Procedures
- **Critical Health**: Emergency healing attempts
- **Failed Healing**: Death as last resort
- **Wallet Issues**: Secure wallet management
- **Database Errors**: Fallback data handling

## Security and Wallet Management

### Wallet Security
- **Keypair Generation**: Secure random wallet creation
- **Encrypted Storage**: Secure wallet persistence
- **Access Control**: Limited wallet operation permissions
- **Treasury Management**: Central funding from secure treasury

### Transaction Safety
- **Confirmation Requirements**: Wait for blockchain confirmation
- **Error Recovery**: Handle failed transactions gracefully
- **Balance Monitoring**: Track SOL balances for all NPCs
- **Funding Management**: Automatic wallet funding as needed

## Startup and Shutdown

### Initialization Process
1. **Environment Validation**: Check required configuration
2. **Mode Selection**: Choose activity focus
3. **Location Loading**: Retrieve game world data
4. **NPC Resumption**: Reload existing NPCs from database
5. **New Spawning**: Create additional NPCs if needed
6. **Activity Startup**: Begin staggered activity scheduling

### Graceful Shutdown
- **Signal Handling**: Respond to SIGINT and SIGTERM
- **Timer Cleanup**: Clear all scheduled activities
- **State Persistence**: Save current NPC states
- **Resource Release**: Clean up connections and timers

## Integration Points

### API Endpoints
The engine interacts with various game API endpoints:
- **mine-action**: Resource extraction
- **travel-action**: Location movement
- **buy-item/sell-item**: Market transactions
- **use-item**: Consumable usage
- **equip-item**: Equipment management
- **send-message**: Chat functionality
- **npc-exchange**: SOL/coin trading
- **get-player-character**: Character data retrieval
- **get-market**: Market information
- **get-locations**: World data
- **get-exchange-info**: Trading rates
- **generate-character-image**: NPC appearance
- **mint-nft**: Character NFT creation

### Database Integration
- **Supabase Connection**: Real-time character data
- **Character Updates**: Health, energy, location tracking
- **Status Management**: Active/dead state persistence
- **Inventory Sync**: Item and equipment tracking

## Technical Implementation Details

### Async/Await Pattern
- All major operations use modern async/await syntax
- Proper error handling with try/catch blocks
- Promise-based API interactions
- Non-blocking operation design

### Memory Management
- Map-based NPC storage for efficient lookup
- Timeout cleanup to prevent memory leaks
- Periodic metric resets to control growth
- Efficient data structure usage

### Performance Optimization
- Staggered activity scheduling prevents system overload
- Intelligent delay calculation based on population
- Minimal database queries through local caching
- Efficient API batching where possible

## Extensibility

The engine is designed for easy extension:

### Adding New Actions
1. Add action to preferences in personality system
2. Implement action method in NPCEngine class
3. Add case to executeAction switch statement
4. Update activity selection logic if needed

### New Personality Types
1. Define preferences in gameConfig.js
2. Add to available personalities list
3. Optionally add personality-specific logic
4. Update documentation

### Enhanced Decision Making
- Personality-specific action implementations
- Environmental factor integration
- Advanced economic modeling
- Machine learning integration potential

## Best Practices

### Configuration
- Use environment variables for deployment-specific settings
- Maintain sensible defaults for all configuration options
- Document all configuration parameters
- Validate configuration on startup

### Monitoring
- Enable appropriate logging for environment
- Monitor key performance metrics
- Set up alerts for critical failures
- Regular performance analysis

### Scaling
- Monitor system resources under load
- Adjust NPC count based on server capacity
- Implement rate limiting for API calls
- Consider horizontal scaling options

## Troubleshooting

### Common Issues
1. **NPCs Not Acting**: Check energy levels and death status
2. **High Error Rates**: Verify API endpoint availability
3. **Memory Growth**: Ensure timer cleanup on shutdown
4. **Database Errors**: Check Supabase connection and permissions
5. **Wallet Issues**: Verify treasury funding and keypair validity

### Debug Tools
- Set LOG_LEVEL to 'debug' for detailed information
- Monitor population stats for unusual patterns
- Check individual NPC states in database
- Review API response patterns

### Performance Tuning
- Adjust BASE_ACTIVITY_INTERVAL for load management
- Modify NPC_COUNT based on server capacity
- Tune personality preferences for desired behavior
- Optimize database query patterns

This NPC Engine creates a dynamic, autonomous virtual world where NPCs live, work, trade, explore, and interact in meaningful ways, providing depth and life to the Wojak Earth gaming experience.

