// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id            String @id @default(cuid())
  nftAddress    String @unique // Solana NFT address
  tokenId       String @unique // Token ID or mint address
  walletAddress String // Owner's wallet

  // Character basics
  name          String
  gender        Gender
  characterType CharacterType @default(HUMAN)

  // Current state
  currentLocationId String
  currentLocation   Location @relation(fields: [currentLocationId], references: [id])

  // NFT versioning
  currentVersion  Int     @default(1)
  currentImageUrl String?

  // Game stats
  energy Int @default(100)
  health Int @default(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  inventory      CharacterInventory[]
  imageHistory   CharacterImage[]
  transactions   Transaction[]
  marketListings MarketListing[]
  chatMessages   ChatMessage[]

  @@map("characters")
}

model Item {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  category    ItemCategory

  // Visual properties
  layerType LayerType? // which layer this item affects
  imageUrl  String? // item's image for layering

  // Game properties
  rarity     Rarity @default(COMMON)
  durability Int? // for equipment that degrades

  // Stats effects (optional for MVP)
  energyEffect Int?
  healthEffect Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  characterInventory CharacterInventory[]
  locationResources  LocationResource[]
  marketListings     MarketListing[]

  @@map("items")
}

model ChatMessage {
  id          String @id @default(cuid())
  locationId  String
  characterId String

  message     String
  messageType ChatMessageType @default(CHAT)

  // For system messages (player joined, found item, etc.)
  isSystem Boolean @default(false)

  location  Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("chat_messages")
}

model Location {
  id          String  @id @default(cuid())
  name        String
  description String
  imageUrl    String?

  // Hierarchy support
  parentLocationId String?
  parentLocation   Location?  @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  subLocations     Location[] @relation("LocationHierarchy")

  // Location type
  locationType LocationType @default(REGION) // REGION, CITY, BUILDING, ROOM

  // Location properties
  biome      String? // only for top-level locations
  difficulty Int     @default(1)

  // Map positioning
  mapX Int? // X coordinate on map
  mapY Int? // Y coordinate on map

  // Location stats
  playerCount Int       @default(0) // cached count for performance
  lastActive  DateTime? // when someone last performed an action here

  // Location features
  hasMarket Boolean @default(true)
  hasMining Boolean @default(true)
  hasTravel Boolean @default(true)
  hasChat   Boolean @default(true) // enable chat in this location

  // Chat settings
  chatScope ChatScope @default(LOCAL) // LOCAL (this location only) or REGIONAL (includes parent)

  // Flavor text
  welcomeMessage String? // custom message when entering
  lore           String? // extended description/backstory

  // Entry requirements (optional)
  minLevel  Int? // minimum level to enter
  entryCost Int? // cost in coins to enter
  isPrivate Boolean @default(false) // requires invitation/ownership

  // Available resources for mining
  resources LocationResource[]

  // Characters currently here
  characters Character[]

  // Market items available here
  marketListings MarketListing[]

  // Chat messages in this location
  chatMessages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentLocationId]) // location names must be unique within parent
  @@map("locations")
}

model CharacterInventory {
  id          String  @id @default(cuid())
  characterId String
  itemId      String
  quantity    Int     @default(1)
  isEquipped  Boolean @default(false)

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([characterId, itemId])
  @@map("character_inventory")
}

model LocationResource {
  id         String @id @default(cuid())
  locationId String
  itemId     String

  // Mining properties
  spawnRate  Float @default(0.1) // chance per mining attempt
  maxPerDay  Int? // daily limit per character
  difficulty Int   @default(1)

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  item     Item     @relation(fields: [itemId], references: [id])

  @@unique([locationId, itemId])
  @@map("location_resources")
}

model CharacterImage {
  id          String  @id @default(cuid())
  characterId String
  version     Int
  imageUrl    String
  description String? // what changed in this version

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([characterId, version])
  @@map("character_images")
}

model MarketListing {
  id         String  @id @default(cuid())
  sellerId   String? // null for system items
  locationId String
  itemId     String

  price        Int // in game currency or SOL lamports
  quantity     Int     @default(1)
  isSystemItem Boolean @default(false) // true for NPC shop items

  seller   Character? @relation(fields: [sellerId], references: [id])
  location Location   @relation(fields: [locationId], references: [id])
  item     Item       @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("market_listings")
}

model Transaction {
  id          String          @id @default(cuid())
  characterId String
  type        TransactionType
  itemId      String?
  quantity    Int?
  description String

  character Character @relation(fields: [characterId], references: [id])

  createdAt DateTime @default(now())

  @@map("transactions")
}

// Enums
enum Gender {
  MALE
  FEMALE
}

enum CharacterType {
  HUMAN
  CREATURE
}

enum LocationType {
  REGION // Continents, large areas
  CITY // Towns, cities
  BUILDING // Inns, shops, temples
  ROOM // Specific rooms within buildings
}

enum ChatScope {
  LOCAL // Only this specific location
  REGIONAL // This location + parent location
  GLOBAL // Entire game (for special locations)
}

enum ChatMessageType {
  CHAT // Regular player chat
  EMOTE // Player actions (/me waves)
  SYSTEM // System announcements
  WHISPER // Private messages
}

enum ItemCategory {
  CLOTHING
  HAT
  ACCESSORY
  TOOL
  CONSUMABLE
  MATERIAL
}

enum LayerType {
  BACKGROUND
  BASE
  CLOTHING
  HAT
  FACE_COVERING
  ACCESSORY
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum TransactionType {
  MINT
  MINE
  BUY
  SELL
  TRAVEL
  EQUIP
  UNEQUIP
}
